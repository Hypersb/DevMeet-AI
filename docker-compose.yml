version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devmeet-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: devmeet_ai
      POSTGRES_USER: devmeet
      POSTGRES_PASSWORD: devmeet_password
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - devmeet-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devmeet -d devmeet_ai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: devmeet-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - devmeet-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DevMeet AI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: devmeet-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://devmeet:devmeet_password@postgres:5432/devmeet_ai?schema=public
      REDIS_URL: redis://redis:6379
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - devmeet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: devmeet-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - app_uploads:/var/www/uploads:ro
    depends_on:
      - app
    networks:
      - devmeet-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local

networks:
  devmeet-network:
    driver: bridge

# Development override (docker-compose.override.yml)
# Use this for development with live reloading
# services:
#   app:
#     build:
#       target: builder
#     volumes:
#       - ./src:/app/src
#       - ./public:/app/public
#       - ./prisma:/app/prisma
#     environment:
#       NODE_ENV: development
#       DATABASE_URL: postgresql://devmeet:devmeet_password@postgres:5432/devmeet_ai?schema=public
#     command: npm run dev