generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credential-based authentication
  role          UserRole  @default(CANDIDATE)
  company       String?   // Company name for non-candidates
  position      String?   // Job position
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  interviews    Interview[]
  candidates    Candidate[]
  assessments   Assessment[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Candidate {
  id              String   @id @default(cuid())
  userId          String?
  name            String
  email           String   @unique
  phone           String?
  githubUsername  String?
  githubUrl       String?
  resume          String?
  coverLetter     String?
  position        String
  experience      String
  skills          String // JSON array as string
  status          CandidateStatus @default(APPLIED)
  createdBy       String?  // Track who created this candidate
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User?        @relation(fields: [userId], references: [id])
  interviews      Interview[]
  assessments     Assessment[]
  githubAnalysis  GitHubAnalysis[]

  @@map("candidates")
}

model Interview {
  id                String         @id @default(cuid())
  title             String
  description       String?
  candidateId       String
  interviewerId     String
  type              InterviewType
  status            InterviewStatus @default(SCHEDULED)
  scheduledAt       DateTime
  startedAt         DateTime?
  completedAt       DateTime?
  duration          Int?           // Duration in minutes
  aiPersonality     String         @default("professional")
  techStack         String         // JSON array as string
  difficultyLevel   String         @default("intermediate")
  questions         String         // JSON serialized questions and responses
  notes             String?
  score             Float?
  recommendation    String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  candidate         Candidate      @relation(fields: [candidateId], references: [id])
  interviewer       User           @relation(fields: [interviewerId], references: [id])
  assessments       Assessment[]

  @@map("interviews")
}

model Assessment {
  id              String   @id @default(cuid())
  interviewId     String
  candidateId     String
  assessorId      String
  technicalScore  Float
  communicationScore Float
  problemSolvingScore Float
  cultureScore    Float
  overallScore    Float
  feedback        String
  recommendation  AssessmentRecommendation
  strengths       String // JSON array as string
  weaknesses      String // JSON array as string
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  interview       Interview @relation(fields: [interviewId], references: [id])
  candidate       Candidate @relation(fields: [candidateId], references: [id])
  assessor        User      @relation(fields: [assessorId], references: [id])

  @@map("assessments")
}

model GitHubAnalysis {
  id                  String   @id @default(cuid())
  candidateId         String
  username            String
  profileData         String   // JSON serialized GitHub profile
  repositories        String   // JSON serialized repositories data
  contributions       String   // JSON serialized contributions
  languageStats       String   // JSON serialized language statistics
  activityScore       Float
  codeQualityScore    Float
  collaborationScore  Float
  consistencyScore    Float
  overallScore        Float
  insights            String   // JSON serialized insights
  analyzedAt          DateTime @default(now())
  
  // Relations
  candidate           Candidate @relation(fields: [candidateId], references: [id])

  @@map("github_analysis")
}

enum UserRole {
  ADMIN
  RECRUITER
  INTERVIEWER
  CANDIDATE
}

enum CandidateStatus {
  APPLIED
  SCREENING
  INTERVIEWING
  ASSESSMENT
  OFFERED
  HIRED
  REJECTED
}

enum InterviewType {
  TECHNICAL
  BEHAVIORAL
  SYSTEM_DESIGN
  CODING_CHALLENGE
  CULTURAL_FIT
}

enum InterviewStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AssessmentRecommendation {
  STRONG_HIRE
  HIRE
  NO_HIRE
  STRONG_NO_HIRE
}